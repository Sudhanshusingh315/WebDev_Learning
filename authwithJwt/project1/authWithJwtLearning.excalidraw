{
  "type": "excalidraw",
  "version": 2,
  "source": "https://marketplace.visualstudio.com/items?itemName=pomdtr.excalidraw-editor",
  "elements": [
    {
      "type": "rectangle",
      "version": 62,
      "versionNonce": 830957640,
      "isDeleted": false,
      "id": "MlAKG9XG6sTwPyZAvgLgK",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 327,
      "y": 138,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 670,
      "height": 82,
      "seed": 135446584,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [],
      "updated": 1711885313453,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 27,
      "versionNonce": 1755838243,
      "isDeleted": false,
      "id": "t2-h1h6YfBXtkvgSHXc1E",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 569,
      "y": 169,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 147.07984924316406,
      "height": 25,
      "seed": 834153272,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711901566096,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "Auth with JWT",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Auth with JWT",
      "lineHeight": 1.25,
      "baseline": 18
    },
    {
      "type": "rectangle",
      "version": 256,
      "versionNonce": 503330179,
      "isDeleted": false,
      "id": "FD_H-sMCak6s96xihwjBD",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 362,
      "y": 277,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 1689.333333333333,
      "height": 1699.3333333333328,
      "seed": 130203208,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "boundElements": [
        {
          "id": "-bygfqGGY2iXKTuGbfbsW",
          "type": "arrow"
        }
      ],
      "updated": 1711902843837,
      "link": null,
      "locked": false
    },
    {
      "type": "text",
      "version": 135,
      "versionNonce": 1014719693,
      "isDeleted": false,
      "id": "63kS4fmeXU08eUC_pTtpz",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 398,
      "y": 293,
      "strokeColor": "#f08c00",
      "backgroundColor": "transparent",
      "width": 108.50773620605469,
      "height": 34.218927455475445,
      "seed": 257315128,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711902826606,
      "link": null,
      "locked": false,
      "fontSize": 27.375141964380358,
      "fontFamily": 1,
      "text": "Backend",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "Backend",
      "lineHeight": 1.25,
      "baseline": 24
    },
    {
      "type": "text",
      "version": 389,
      "versionNonce": 461576899,
      "isDeleted": false,
      "id": "z2m_efhaKrqsvOUNHnQLN",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 396,
      "y": 374,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 698.1192016601562,
      "height": 175,
      "seed": 810448440,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711901566100,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "1) packages\n    *) mongoose for mongodb\n    *) bcrypt for password hasing\n    *) detenv for adding keys\n    *) jsonwebtoke for adding the jwt token\n    *) express for creating the server\n    *) cookie-parser this will help to get the data from the link or url",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "1) packages\n    *) mongoose for mongodb\n    *) bcrypt for password hasing\n    *) detenv for adding keys\n    *) jsonwebtoke for adding the jwt token\n    *) express for creating the server\n    *) cookie-parser this will help to get the data from the link or url",
      "lineHeight": 1.25,
      "baseline": 168
    },
    {
      "type": "text",
      "version": 623,
      "versionNonce": 635643629,
      "isDeleted": false,
      "id": "xs0yBbRs15RPLlOJCm_Ev",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 393,
      "y": 580,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 833.4190063476562,
      "height": 275,
      "seed": 21455688,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711901566103,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "2) FLOW\n       *) Basic:\n            *) creating the server , add the mongoose and connect, USE COOKIE\n               PARSER to intecept the req and get the set the cookie, cookies will\n               be HTTP only so that no one can access it from the script \n            *) Creat the model of the user and modle should have\n                name\n                email\n                password\n            *)\n ",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "2) FLOW\n       *) Basic:\n            *) creating the server , add the mongoose and connect, USE COOKIE\n               PARSER to intecept the req and get the set the cookie, cookies will\n               be HTTP only so that no one can access it from the script \n            *) Creat the model of the user and modle should have\n                name\n                email\n                password\n            *)\n ",
      "lineHeight": 1.25,
      "baseline": 268
    },
    {
      "type": "text",
      "version": 1132,
      "versionNonce": 2054736483,
      "isDeleted": false,
      "id": "aRLA7xhxy-8ZwLY5Bsm0o",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 475.9929686547242,
      "y": 862.0070313452759,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 1011.819091796875,
      "height": 400,
      "seed": 1955250504,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711901566106,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "*) Create the Router and userControler, router will start with \"/api/user\n    *) Routes -> userRoutes\n        -> \"/\" for register [POST] \n        -> \"/auth\" for auth or login [POST]\n        -> \"/logout\" for logout the user [POST]\n        -> \"/profile\" for getting the profile of use [GET]\n        -> \"/profile\" for updating the profile of user [PUT] \n\n    *) userController \n    1) authUser :: \n        get the entries from the body and the check \n        if the user exists and the password is right\n\n \n    \n    generating the token ? pass the user Id and the sign the token and the res.cookie with name jwt",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "*) Create the Router and userControler, router will start with \"/api/user\n    *) Routes -> userRoutes\n        -> \"/\" for register [POST] \n        -> \"/auth\" for auth or login [POST]\n        -> \"/logout\" for logout the user [POST]\n        -> \"/profile\" for getting the profile of use [GET]\n        -> \"/profile\" for updating the profile of user [PUT] \n\n    *) userController \n    1) authUser :: \n        get the entries from the body and the check \n        if the user exists and the password is right\n\n \n    \n    generating the token ? pass the user Id and the sign the token and the res.cookie with name jwt",
      "lineHeight": 1.25,
      "baseline": 393
    },
    {
      "type": "text",
      "version": 154,
      "versionNonce": 505004365,
      "isDeleted": false,
      "id": "LlgRZysOc2vPcmftLD3_Y",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 552.2044611627301,
      "y": 1166.7532575467058,
      "strokeColor": "#2f9e44",
      "backgroundColor": "transparent",
      "width": 376.87957763671875,
      "height": 50,
      "seed": 811249992,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711901566108,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "let the user login and invoke generate\ntoken(user._id)",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "let the user login and invoke generate\ntoken(user._id)",
      "lineHeight": 1.25,
      "baseline": 43
    },
    {
      "type": "text",
      "version": 209,
      "versionNonce": 978814467,
      "isDeleted": false,
      "id": "PtTtAmpyFcduVc8HO4KMT",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 514.4716522832113,
      "y": 1278.9587155305385,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 570.1793212890625,
      "height": 100,
      "seed": 693688888,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711901566111,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "2) registerUser ::\n    get the user Info from the req.body and the \n    check if the user already exits, throw and error also\n    use needs to fill all the fields.       ",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "2) registerUser ::\n    get the user Info from the req.body and the \n    check if the user already exits, throw and error also\n    use needs to fill all the fields.       ",
      "lineHeight": 1.25,
      "baseline": 93
    },
    {
      "type": "text",
      "version": 206,
      "versionNonce": 1565396909,
      "isDeleted": false,
      "id": "1HfuI-OBTxRvy3Jme5nG4",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 513.5561036229637,
      "y": 1436.8407316316825,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 777.0191650390625,
      "height": 75,
      "seed": 1633961528,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711901566113,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "3) logout ::  i would just like to reset the cookie and we can do this becasue\n             we are using cookie parser, right?\n             so like res.cookie('jwt', \"\",{expires: new Date(0)}",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "3) logout ::  i would just like to reset the cookie and we can do this becasue\n             we are using cookie parser, right?\n             so like res.cookie('jwt', \"\",{expires: new Date(0)}",
      "lineHeight": 1.25,
      "baseline": 68
    },
    {
      "type": "text",
      "version": 449,
      "versionNonce": 1914555811,
      "isDeleted": false,
      "id": "5Zqe3Y3ttFUQn1rt3GQYI",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 520.1931493432381,
      "y": 1558.519903170045,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 1457.5184326171875,
      "height": 100,
      "seed": 1586769480,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711901566115,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "4) getUserProfile :: this would just be a get request with find the user from the \n                    mongodb and just send the user, that's it [protected routes]\n\n5) updateUserProfile :: this would be just a post req and the just update the user that's it also send the user back also lol [protected route]",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "4) getUserProfile :: this would just be a get request with find the user from the \n                    mongodb and just send the user, that's it [protected routes]\n\n5) updateUserProfile :: this would be just a post req and the just update the user that's it also send the user back also lol [protected route]",
      "lineHeight": 1.25,
      "baseline": 93
    },
    {
      "type": "text",
      "version": 239,
      "versionNonce": 176186627,
      "isDeleted": false,
      "id": "dfD2ZY1-I5-VR5f2mUq-Z",
      "fillStyle": "solid",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "angle": 0,
      "x": 523.5116722033754,
      "y": 1703.4287347293675,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "width": 483.659423828125,
      "height": 75,
      "seed": 840684872,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "boundElements": [],
      "updated": 1711902774928,
      "link": null,
      "locked": false,
      "fontSize": 20,
      "fontFamily": 1,
      "text": "6) How to write a proteced route?\n    get the token from the cookies from the res\n    decode and set the user at req.user  ",
      "textAlign": "left",
      "verticalAlign": "top",
      "containerId": null,
      "originalText": "6) How to write a proteced route?\n    get the token from the cookies from the res\n    decode and set the user at req.user  ",
      "lineHeight": 1.25,
      "baseline": 68
    },
    {
      "id": "gn-KnW-JmyQOXBlXEAfJT",
      "type": "line",
      "x": 399.6375944917097,
      "y": 327.57795297984154,
      "width": 115.81840188206701,
      "height": 0,
      "angle": 0,
      "strokeColor": "#e03131",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "seed": 2115838093,
      "version": 32,
      "versionNonce": 399067939,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1711902821302,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          115.81840188206701,
          0
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": null,
      "endBinding": null,
      "startArrowhead": null,
      "endArrowhead": null
    },
    {
      "id": "-bygfqGGY2iXKTuGbfbsW",
      "type": "arrow",
      "x": 1150.2137421306836,
      "y": 1997.7401472402332,
      "width": 9.439577462335137,
      "height": 155.4043114055778,
      "angle": 0,
      "strokeColor": "#f08c00",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "seed": 261641613,
      "version": 170,
      "versionNonce": 1693244355,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1711903234093,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          9.439577462335137,
          155.4043114055778
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": {
        "elementId": "FD_H-sMCak6s96xihwjBD",
        "focus": 0.09083094001795465,
        "gap": 21.40681390690054
      },
      "endBinding": {
        "elementId": "LTxpH5UccY1fRxzFQSw37",
        "focus": 0.0016119932296277588,
        "gap": 11.931843728440299
      },
      "startArrowhead": null,
      "endArrowhead": "arrow"
    },
    {
      "id": "LTxpH5UccY1fRxzFQSw37",
      "type": "rectangle",
      "x": 293.58317454125165,
      "y": 2165.076302374251,
      "width": 1873.2994653651035,
      "height": 2353.556175434819,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 3
      },
      "seed": 27479939,
      "version": 131,
      "versionNonce": 92201091,
      "isDeleted": false,
      "boundElements": [
        {
          "id": "-bygfqGGY2iXKTuGbfbsW",
          "type": "arrow"
        }
      ],
      "updated": 1711903234092,
      "link": null,
      "locked": false
    },
    {
      "id": "NI2L9-jbGGO3CX2QXE4I6",
      "type": "text",
      "x": 414.55536521840827,
      "y": 2243.2244487431876,
      "width": 162.87747192382812,
      "height": 48.806254541082396,
      "angle": 0,
      "strokeColor": "#c2255c",
      "backgroundColor": "transparent",
      "fillStyle": "solid",
      "strokeWidth": 4,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 775936973,
      "version": 69,
      "versionNonce": 439971683,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1711902910759,
      "link": null,
      "locked": false,
      "text": "Frontend",
      "fontSize": 39.045003632865914,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 34,
      "containerId": null,
      "originalText": "Frontend",
      "lineHeight": 1.25
    },
    {
      "id": "NjNcsYnNb0jvR_5MeireP",
      "type": "line",
      "x": 394.765823885779,
      "y": 2296.615771845332,
      "width": 217.06744215370998,
      "height": 0,
      "angle": 0,
      "strokeColor": "#9c36b5",
      "backgroundColor": "#eebefa",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": {
        "type": 2
      },
      "seed": 51755821,
      "version": 28,
      "versionNonce": 727216515,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1711902923079,
      "link": null,
      "locked": false,
      "points": [
        [
          0,
          0
        ],
        [
          217.06744215370998,
          0
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": null,
      "endBinding": null,
      "startArrowhead": null,
      "endArrowhead": null
    },
    {
      "id": "1hMvTyfWYRJAsJuhvQB0m",
      "type": "text",
      "x": 400.4073231207379,
      "y": 2343.8743358288843,
      "width": 1672.998291015625,
      "height": 275,
      "angle": 0,
      "strokeColor": "#1e1e1e",
      "backgroundColor": "#eebefa",
      "fillStyle": "solid",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "frameId": null,
      "roundness": null,
      "seed": 1693996365,
      "version": 957,
      "versionNonce": 1554151213,
      "isDeleted": false,
      "boundElements": null,
      "updated": 1711905327366,
      "link": null,
      "locked": false,
      "text": "1) we want axios we want react-redux we want @reactjs/toolkit\n2) Basics\n    *) App will handle the routers\n    *) nav bar will be dynamic, it will be different when the user in not logged in and also has a dfferent look but once the user is looged in it's different and it's also\n     going show the same of the person\n    *) Login, Register, profile component\n3) Login component\n    -> Do the basics make the form take the input and code the submit button\n    -> in the useEffect check if there is a userInfo [in the slice]\n       so let's actually useInfo is just going to info in stored in the local storage\n",
      "fontSize": 20,
      "fontFamily": 1,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 268,
      "containerId": null,
      "originalText": "1) we want axios we want react-redux we want @reactjs/toolkit\n2) Basics\n    *) App will handle the routers\n    *) nav bar will be dynamic, it will be different when the user in not logged in and also has a dfferent look but once the user is looged in it's different and it's also\n     going show the same of the person\n    *) Login, Register, profile component\n3) Login component\n    -> Do the basics make the form take the input and code the submit button\n    -> in the useEffect check if there is a userInfo [in the slice]\n       so let's actually useInfo is just going to info in stored in the local storage\n",
      "lineHeight": 1.25
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}